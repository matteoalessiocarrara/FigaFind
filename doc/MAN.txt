Help on module htmlfbapi:

NAME
    htmlfbapi - # -*- coding: utf-8 -*-

FILE
    HTML-Facebook-API/src/htmlfbapi.py

CLASSES
    exceptions.Exception(exceptions.BaseException)
        ConstError
        HTTPError
        LoginError
    Facebook
    Group
    Profile
    requests.sessions.Session(requests.sessions.SessionRedirectMixin)
        Requests_Session
    
    class ConstError(exceptions.Exception)
     |  Una costante non è stata trovata, metodi da aggiornare
     |  
     |  Method resolution order:
     |      ConstError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class Facebook
     |  Il sito, visto da un profilo
     |  
     |  Methods defined here:
     |  
     |  __init__(self, email, password, ua=None)
     |      Si connette a facebook con questo profilo.
     |      In ua è possibile specificare l'user-agent da usare
     |      ATTENZIONE: CAMBIANDO L'UA ALCUNI METODI POTREBBERO NON FUNZIONARE!
     |  
     |  gender_str(self, gender_en)
     |      Restituisce gender_en tradotto nella lingua del profilo
     |  
     |  get_group(self, gid)
     |      Restituisce il gruppo con id 'gid'
     |  
     |  get_profile(self, url)
     |      Restituisce un profilo
     |  
     |  lang(self)
     |      Restituisce la lingua di questo profilo
     |  
     |  session(self)
     |      Per usare il profilo (self.__session) fuori da questo oggetto
     |  
     |  user_agent(self, ua=None, update=False)
     |      Restituisce ed eventualmente modifica l'ua
     |      ATTENZIONE: CAMBIANDO L'UA ALCUNI METODI POTREBBERO NON FUNZIONARE!
     |      
     |      * Per modificare l'ua assegnare qualcosa a "ua"
     |      * Per usare il nuovo ua, mettere True in update
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  LOGIN_OK_TITLE = 'Facebook'
    
    class Group
     |  Un gruppo
     |  
     |  Methods defined here:
     |  
     |  __init__(self, session, gid)
     |  
     |  members(self, verbose=False, out=<open file '<stdout>', mode 'w'>)
     |      Restituisce la lista dei membri, con verbose stampa (su out) anche i profili attualmente trovati
    
    class HTTPError(exceptions.Exception)
     |  Ricevuto un codice HTTP non-200
     |  
     |  Method resolution order:
     |      HTTPError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class LoginError(exceptions.Exception)
     |  Method resolution order:
     |      LoginError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.Exception:
     |  
     |  __init__(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.Exception:
     |  
     |  __new__ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  __delattr__(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  __getattribute__(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __getslice__(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  __reduce__(...)
     |  
     |  __repr__(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  __setattr__(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  __setstate__(...)
     |  
     |  __str__(...)
     |      x.__str__() <==> str(x)
     |  
     |  __unicode__(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  __dict__
     |  
     |  args
     |  
     |  message
    
    class Profile
     |  Un profilo facebook
     |  
     |  Methods defined here:
     |  
     |  __init__(self, session, session_lang, url)
     |      L'url deve essere nella forma "/nome", senza "facebook.com" prima
     |  
     |  gender(self)
     |      AL ROKO AL ROKO!!1
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  gender_title = {'English (US)': 'Gender', 'Italiano': 'Sesso'}
    
    class Requests_Session(requests.sessions.Session)
     |  Aggiunge un metodo a request.Session()
     |  
     |  Method resolution order:
     |      Requests_Session
     |      requests.sessions.Session
     |      requests.sessions.SessionRedirectMixin
     |      __builtin__.object
     |  
     |  Methods defined here:
     |  
     |  get2(self, url, **kwargs)
     |      Come get(), ma crea un eccezione HTTPError se il return non è 200
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from requests.sessions.Session:
     |  
     |  __enter__(self)
     |  
     |  __exit__(self, *args)
     |  
     |  __getstate__(self)
     |  
     |  __init__(self)
     |  
     |  __setstate__(self, state)
     |  
     |  close(self)
     |      Closes all adapters and as such the session
     |  
     |  delete(self, url, **kwargs)
     |      Sends a DELETE request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  get(self, url, **kwargs)
     |      Sends a GET request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  get_adapter(self, url)
     |      Returns the appropriate connnection adapter for the given URL.
     |  
     |  head(self, url, **kwargs)
     |      Sends a HEAD request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  mount(self, prefix, adapter)
     |      Registers a connection adapter to a prefix.
     |      
     |      Adapters are sorted in descending order by key length.
     |  
     |  options(self, url, **kwargs)
     |      Sends a OPTIONS request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  patch(self, url, data=None, **kwargs)
     |      Sends a PATCH request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  post(self, url, data=None, **kwargs)
     |      Sends a POST request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  prepare_request(self, request)
     |      Constructs a :class:`PreparedRequest <PreparedRequest>` for
     |      transmission and returns it. The :class:`PreparedRequest` has settings
     |      merged from the :class:`Request <Request>` instance and those of the
     |      :class:`Session`.
     |      
     |      :param request: :class:`Request` instance to prepare with this
     |          session's settings.
     |  
     |  put(self, url, data=None, **kwargs)
     |      Sends a PUT request. Returns :class:`Response` object.
     |      
     |      :param url: URL for the new :class:`Request` object.
     |      :param data: (optional) Dictionary, bytes, or file-like object to send in the body of the :class:`Request`.
     |      :param \*\*kwargs: Optional arguments that ``request`` takes.
     |  
     |  request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None)
     |      Constructs a :class:`Request <Request>`, prepares it and sends it.
     |      Returns :class:`Response <Response>` object.
     |      
     |      :param method: method for the new :class:`Request` object.
     |      :param url: URL for the new :class:`Request` object.
     |      :param params: (optional) Dictionary or bytes to be sent in the query
     |          string for the :class:`Request`.
     |      :param data: (optional) Dictionary or bytes to send in the body of the
     |          :class:`Request`.
     |      :param headers: (optional) Dictionary of HTTP Headers to send with the
     |          :class:`Request`.
     |      :param cookies: (optional) Dict or CookieJar object to send with the
     |          :class:`Request`.
     |      :param files: (optional) Dictionary of 'filename': file-like-objects
     |          for multipart encoding upload.
     |      :param auth: (optional) Auth tuple or callable to enable
     |          Basic/Digest/Custom HTTP Auth.
     |      :param timeout: (optional) Float describing the timeout of the
     |          request.
     |      :param allow_redirects: (optional) Boolean. Set to True by default.
     |      :param proxies: (optional) Dictionary mapping protocol to the URL of
     |          the proxy.
     |      :param stream: (optional) whether to immediately download the response
     |          content. Defaults to ``False``.
     |      :param verify: (optional) if ``True``, the SSL cert will be verified.
     |          A CA_BUNDLE path can also be provided.
     |      :param cert: (optional) if String, path to ssl client cert file (.pem).
     |          If Tuple, ('cert', 'key') pair.
     |  
     |  send(self, request, **kwargs)
     |      Send a given PreparedRequest.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from requests.sessions.Session:
     |  
     |  __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hook...
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from requests.sessions.SessionRedirectMixin:
     |  
     |  rebuild_auth(self, prepared_request, response)
     |      When being redirected we may want to strip authentication from the
     |      request to avoid leaking credentials. This method intelligently removes
     |      and reapplies authentication where possible to avoid credential loss.
     |  
     |  rebuild_proxies(self, prepared_request, proxies)
     |      This method re-evaluates the proxy configuration by considering the
     |      environment variables. If we are redirected to a URL covered by
     |      NO_PROXY, we strip the proxy configuration. Otherwise, we set missing
     |      proxy keys for this URL (in case they were stripped by a previous
     |      redirect).
     |      
     |      This method also replaces the Proxy-Authorization header where
     |      necessary.
     |  
     |  resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None)
     |      Receives a Response. Returns a generator of Responses.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from requests.sessions.SessionRedirectMixin:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    ruba(email, password)
        Paura eh? xD

DATA
    GENDER_STR_DICT = {'female': {'English (US)': 'Female', 'Italiano': 'D...
    HOME_URL = 'https://www.facebook.com/'
    LOGIN_URL = 'https://www.facebook.com/login.php'


Help on module __init__:

NAME
    __init__ - # -*- coding: utf-8 -*-

FILE
    /home/richard/programmazione/NUOVI/FigaFind/src/lib/HTML_Facebook_API/src/__init__.py


